import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
-
df=pd.read_csv('Churn_Modelling.csv',index_col = 'RowNumber')
-
df.head()
-
df.info()
-
df.describe()
-
df.isnull().sum()
-
df.shape
-
df.columns
-
#Standardizing the Numerical Columns
-
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
num_cols=['CreditScore','Age','Tenure','Balance','NumOfProducts','EstimatedSalary']
num_subset=scaler.fit_transform(df[num_cols])
-
X=pd.DataFrame(num_subset,columns=num_cols)
-
#Joining Categorical Columns to X
-
X['Geography']=list(df['Geography'])
-
X['Gender']=list(df['Gender'])
-
X['HasCrCard']=list(df['HasCrCard'])
-
X['IsActiveMember']=list(df['IsActiveMember'])
-
X
-
#One Hot Encoding the Categorical Columns
-
X=pd.get_dummies(X,columns=['Geography','Gender'])
-
X
-
Y=df['Exited'].values
-
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)
-
from keras.models import Sequential
from keras.layers import Dense, Dropout
-
classifier = Sequential()
-
classifier.add(Dense(6, activation = 'relu', input_shape = (X_train.shape[1], )))
classifier.add(Dropout(rate = 0.1))
-
classifier.add(Dense(6, activation = 'relu'))
classifier.add(Dropout(rate = 0.1))
-
classifier.add(Dense(1, activation = 'sigmoid'))
-
classifier.summary()
-
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
-
history = classifier.fit(X_train, y_train, batch_size = 32, epochs = 200, validation_split = 0.1, verbose = 2)
-
y_pred = classifier.predict(X_test)
print(y_pred[:5])
-
y_pred = (y_pred > 0.5).astype(int)
print(y_pred[:5])
-
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
-
print(((cm[0][0] + cm[1][1])* 100) / len(y_test), '% of data was classified correctly')
-
