import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings

warnings.filterwarnings("ignore")
-
df = pd.read_csv("uber.csv")
-
df.head()
-
df.info()
-
df.describe()
-
df.shape
-
df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])
-
df.info()
-
df.isnull().sum()
-
df.dropna(inplace=True)
-
df.isnull().sum()
-
plt.hist(df['fare_amount'])
-
fig,ax = plt.subplots()
ax.boxplot(df['fare_amount'])
plt.show()
-
plt.boxplot(df['fare_amount'])
-
plt.scatter(df['pickup_datetime'],df['fare_amount'])
-
q = df["fare_amount"].quantile(0.99)
-
df[df["fare_amount"] < q]
-
plt.boxplot(df['fare_amount'])
-
q_low = df["fare_amount"].quantile(0.01)
q_hi  = df["fare_amount"].quantile(0.99)

df = df[(df["fare_amount"] < q_hi) & (df["fare_amount"] > q_low)]
-
plt.boxplot(df['fare_amount'])
-
plt.scatter(df['pickup_datetime'],df['fare_amount'])
-
df.info()
-
df['fare_amount'].corr(df['passenger_count'])
-
df.corr()
-
df.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)
-
df
-
df=df.drop("key",axis=1)
-
df
-
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
-
X=df.drop("fare_amount",axis=1)
Y=df['fare_amount']
-
X['pickup_datetime'] = pd.to_numeric(X['pickup_datetime'])
-
x_train,x_test,y_train,y_test= train_test_split(X,Y,test_size=0.2,random_state=1)
-
from sklearn.linear_model import LinearRegression
-
lr = LinearRegression()
lr.fit(x_train,y_train)
-
prediction = lr.predict(x_test)
-
from sklearn.metrics import mean_squared_error
lr_rmse = np.sqrt(mean_squared_error(prediction,y_test))
print(lr_rmse)
-
print(r2_score(y_test, prediction))
-
from sklearn.ensemble import RandomForestRegressor

rf=RandomForestRegressor(n_estimators=100,random_state=101)
-
rf.fit(x_train,y_train)
-
rf_predictions= rf.predict(x_test)
-
rfmodel_rmse = np.sqrt(mean_squared_error(rf_predictions,y_test))
print(rfmodel_rmse)
-
print(r2_score(y_test, rf_predictions))